{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/starwars/src/App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = () => {\n    //set isLoading to true\n    setIsLoading(true);\n    setError(null); //fetch default is GET request. This function fetches data in the future (async), \n    //THEN when it gets the data, it will perform a function with the response. \n    //Response is in JSON format, so the response.json() changes it to regular js.\n    //the response.json() returns another promise.\n    //THEN when the data transformation from json to js is done,\n    //\n\n    fetch('https://swapi.dev/api/films').then(response => {\n      return response.json().then(data => {\n        console.log(data.results);\n        const transformedMovies = data.results.map(moviedata => {\n          return {\n            id: moviedata.episode_id,\n            title: moviedata.title,\n            openingText: moviedata.opening_crawl,\n            releaseDate: moviedata.release_date\n          };\n        });\n        setMovies(transformedMovies);\n        setIsLoading(false);\n      });\n    }).catch(error => {});\n    /*ALTERNATIVE VERSION IS USING ASYNC AND AWAIT: \n    async function fetchMoviesHandler() {\n      const response = await fetch('')\n      const data = await response.json();\n    }\n    */\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 44\n    }\n  }), !isLoading && movies.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 46\n    }\n  }, \"FOUND NO MOVIES\"), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 22\n    }\n  }, \"LOADING.......\")));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","fetch","then","response","json","data","console","log","results","transformedMovies","map","moviedata","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","catch","length"],"sources":["/Users/jennyhwang/Desktop/starwars/src/App.js"],"sourcesContent":["import React, {useState} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\nconst [movies, setMovies] = useState([]);\nconst [isLoading, setIsLoading] = useState(false);\nconst [error, setError] = useState(null);\n\n  \nconst fetchMoviesHandler = () => {\n\n//set isLoading to true\nsetIsLoading(true);\nsetError(null);\n\n  //fetch default is GET request. This function fetches data in the future (async), \n  //THEN when it gets the data, it will perform a function with the response. \n  //Response is in JSON format, so the response.json() changes it to regular js.\n  //the response.json() returns another promise.\n  //THEN when the data transformation from json to js is done,\n  //\n  fetch('https://swapi.dev/api/films').then(\n    response => {return response.json().then(\n      data => {console.log(data.results);\n        const transformedMovies = data.results.map(moviedata => {\n          return {id: moviedata.episode_id,\n          title: moviedata.title,\n          openingText: moviedata.opening_crawl,\n          releaseDate: moviedata.release_date\n          }\n        });\n      setMovies(transformedMovies);\n      setIsLoading(false)\n      }\n    )}\n  ).catch(error => {});\n\n  /*ALTERNATIVE VERSION IS USING ASYNC AND AWAIT: \n  async function fetchMoviesHandler() {\n    const response = await fetch('')\n    const data = await response.json();\n  }\n  */\n}\n\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n       {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n       {!isLoading && movies.length === 0 && <p>FOUND NO MOVIES</p>}\n       {isLoading && <p>LOADING.......</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;EACf,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;;EAGA,MAAMS,kBAAkB,GAAG,MAAM;IAEjC;IACAH,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR,CAJiC,CAM/B;IACA;IACA;IACA;IACA;IACA;;IACAE,KAAK,CAAC,6BAAD,CAAL,CAAqCC,IAArC,CACEC,QAAQ,IAAI;MAAC,OAAOA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAClBG,IAAI,IAAI;QAACC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,OAAjB;QACP,MAAMC,iBAAiB,GAAGJ,IAAI,CAACG,OAAL,CAAaE,GAAb,CAAiBC,SAAS,IAAI;UACtD,OAAO;YAACC,EAAE,EAAED,SAAS,CAACE,UAAf;YACPC,KAAK,EAAEH,SAAS,CAACG,KADV;YAEPC,WAAW,EAAEJ,SAAS,CAACK,aAFhB;YAGPC,WAAW,EAAEN,SAAS,CAACO;UAHhB,CAAP;QAKD,CANyB,CAA1B;QAOFvB,SAAS,CAACc,iBAAD,CAAT;QACAZ,YAAY,CAAC,KAAD,CAAZ;MACC,CAXiB,CAAP;IAYX,CAbJ,EAcEsB,KAdF,CAcQrB,KAAK,IAAI,CAAE,CAdnB;IAgBA;AACF;AACA;AACA;AACA;AACA;EACC,CAlCD;;EAqCE,oBACE,oBAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,OAAO,EAAEE,kBAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBADF,CADF,eAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,CAACJ,SAAD,IAAcF,MAAM,CAAC0B,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;IAAY,MAAM,EAAE1B,MAApB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADrC,EAEE,CAACE,SAAD,IAAcF,MAAM,CAAC0B,MAAP,KAAkB,CAAhC,iBAAqC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAFvC,EAGExB,SAAS,iBAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,oBAHf,CAJF,CADF;AAYD;;AAED,eAAeH,GAAf"},"metadata":{},"sourceType":"module"}