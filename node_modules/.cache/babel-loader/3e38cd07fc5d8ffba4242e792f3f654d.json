{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/starwars/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, []);\n\n  const fetchMoviesHandler = async () => {\n    //set isLoading to true\n    setIsLoading(true);\n    setError(null); //fetch default is GET request. This function fetches data in the future (async), \n    //THEN when it gets the data, it will perform a function with the response. \n    //Response is in JSON format, so the response.json() changes it to regular js.\n    //the response.json() returns another promise.\n    //THEN when the data transformation from json to js is done,\n\n    /*\n    fetch('https://swapi.dev/api/films').then(\n      response => {return response.json().then(\n        data => {console.log(data.results);\n          const transformedMovies = data.results.map(moviedata => {\n            return {id: moviedata.episode_id,\n            title: moviedata.title,\n            openingText: moviedata.opening_crawl,\n            releaseDate: moviedata.release_date\n            }\n          });\n        setMovies(transformedMovies);\n        setIsLoading(false)\n        }\n      )}\n    );\n    */\n\n    /*ALTERNATIVE VERSION IS USING ASYNC AND AWAIT: \n    async function fetchMoviesHandler() {\n      const response = await fetch('')\n      const data = await response.json();\n    }\n    */\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films');\n\n      if (!response.ok) {\n        throw new Error(\"SOMETHING WENT WRONG\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseData: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } //error in this case is the string \"SOMETHING WENT WRONG\"\n    catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  let content = \"Found No Movies\";\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, \"LOADING....\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseData","release_date","message","content","length"],"sources":["/Users/jennyhwang/Desktop/starwars/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\nconst [movies, setMovies] = useState([]);\nconst [isLoading, setIsLoading] = useState(false);\nconst [error, setError] = useState(null);\n\nuseEffect(() => {\n  fetchMoviesHandler();\n}, [])\n\n  \nconst fetchMoviesHandler = async () => {\n\n//set isLoading to true\nsetIsLoading(true);\nsetError(null);\n\n  //fetch default is GET request. This function fetches data in the future (async), \n  //THEN when it gets the data, it will perform a function with the response. \n  //Response is in JSON format, so the response.json() changes it to regular js.\n  //the response.json() returns another promise.\n  //THEN when the data transformation from json to js is done,\n  /*\n  fetch('https://swapi.dev/api/films').then(\n    response => {return response.json().then(\n      data => {console.log(data.results);\n        const transformedMovies = data.results.map(moviedata => {\n          return {id: moviedata.episode_id,\n          title: moviedata.title,\n          openingText: moviedata.opening_crawl,\n          releaseDate: moviedata.release_date\n          }\n        });\n      setMovies(transformedMovies);\n      setIsLoading(false)\n      }\n    )}\n  );\n*/\n\n  /*ALTERNATIVE VERSION IS USING ASYNC AND AWAIT: \n  async function fetchMoviesHandler() {\n    const response = await fetch('')\n    const data = await response.json();\n  }\n  */\n\ntry {\n  const response = await fetch('https://swapi.dev/api/films');\n  if (!response.ok) {\n    throw new Error(\"SOMETHING WENT WRONG\");\n  }\n\n  const data = await response.json();\n  const transformedMovies = data.results.map((movieData) => {\n    return {\n      id: movieData.episode_id,\n      title: movieData.title,\n      openingText: movieData.opening_crawl,\n      releaseData: movieData.release_date\n    };\n  });\n  setMovies(transformedMovies);\n}\n//error in this case is the string \"SOMETHING WENT WRONG\"\ncatch (error) {\n  setError(error.message)\n}\nsetIsLoading(false); \n\n}\n\nlet content = \"Found No Movies\";\n\nif (movies.length > 0) {\n  content = <MoviesList movies={movies}/>;\n}\n\nif (error) {\n  content = <p>{error}</p>\n}\n\nif (isLoading) {\n  content = <p>LOADING....</p>\n}\n\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n     {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;EACf,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACdS,kBAAkB;EACnB,CAFQ,EAEN,EAFM,CAAT;;EAKA,MAAMA,kBAAkB,GAAG,YAAY;IAEvC;IACAH,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR,CAJuC,CAMrC;IACA;IACA;IACA;IACA;;IACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEE;AACF;AACA;AACA;AACA;AACA;;IAEA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;;MACA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;MACD;;MAED,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;MACA,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;QACxD,OAAO;UACLC,EAAE,EAAED,SAAS,CAACE,UADT;UAELC,KAAK,EAAEH,SAAS,CAACG,KAFZ;UAGLC,WAAW,EAAEJ,SAAS,CAACK,aAHlB;UAILC,WAAW,EAAEN,SAAS,CAACO;QAJlB,CAAP;MAMD,CAPyB,CAA1B;MAQAtB,SAAS,CAACY,iBAAD,CAAT;IACD,CAhBD,CAiBA;IACA,OAAOT,KAAP,EAAc;MACZC,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;IACD;;IACDrB,YAAY,CAAC,KAAD,CAAZ;EAEC,CA3DD;;EA6DA,IAAIsB,OAAO,GAAG,iBAAd;;EAEA,IAAIzB,MAAM,CAAC0B,MAAP,GAAgB,CAApB,EAAuB;IACrBD,OAAO,gBAAG,oBAAC,UAAD;MAAY,MAAM,EAAEzB,MAApB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAV;EACD;;EAED,IAAII,KAAJ,EAAW;IACTqB,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAIrB,KAAJ,CAAV;EACD;;EAED,IAAIF,SAAJ,EAAe;IACbuB,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,iBAAV;EACD;;EAGC,oBACE,oBAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,OAAO,EAAEnB,kBAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBADF,CADF,eAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACAmB,OADA,CAJF,CADF;AAUD;;AAED,eAAe1B,GAAf"},"metadata":{},"sourceType":"module"}