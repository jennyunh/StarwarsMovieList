{"version":3,"sources":["components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","fetch","response","ok","Error","json","data","transformedMovies","results","movieData","episode_id","opening_crawl","releaseData","release_date","message","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","createRoot","document","getElementById","render"],"mappings":";gIACAA,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,2LCajBC,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,gBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,mB,+yMCuFdM,MA/Ff,WACE,MAA4BC,mBAAS,IAArC,mBAAOL,EAAP,KAAeM,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAqBC,sBAAW,sBAAC,+FAErCJ,GAAa,GACbE,EAAS,MAH4B,kBAoCZG,MAAM,+BApCM,WAoC7BC,EApC6B,QAqCrBC,GArCqB,sBAsC3B,IAAIC,MAAM,wBAtCiB,wBAyChBF,EAASG,OAzCO,QAyC7BC,EAzC6B,OA0C7BC,EAAoBD,EAAKE,QAAQnB,KAAI,SAACoB,GAC1C,MAAO,CACLlB,GAAIkB,EAAUC,WACd1B,MAAOyB,EAAUzB,MACjBE,YAAauB,EAAUE,cACvBC,YAAaH,EAAUI,iBAG3BnB,EAAUa,GAlDyB,kDAqDnCT,EAAS,KAAMgB,SArDoB,QAuDrClB,GAAa,GAvDwB,0DAwDpC,IAEHmB,qBAAU,WACRhB,MACC,CAACA,IAMJ,IAAIiB,EAAU,kBAcd,OAZI5B,EAAO6B,OAAS,IAClBD,EAAU,kBAACE,EAAD,CAAY9B,OAAQA,KAG5BS,IACFmB,EAAU,2BAAInB,IAGZF,IACFqB,EAAU,2CAIV,kBAAC,IAAMG,SAAP,KACE,iCACE,4BAAQC,QAASrB,GAAjB,iBAEF,iCAAUiB,KCzFHK,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,kBAAC,EAAD,S","file":"static/js/main.82350dc0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__27rBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__lMnXQ\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    //set isLoading to true\n    setIsLoading(true);\n    setError(null);\n\n    //fetch default is GET request. This function fetches data in the future (async),\n    //THEN when it gets the data, it will perform a function with the response.\n    //Response is in JSON format, so the response.json() changes it to regular js.\n    //the response.json() returns another promise.\n    //THEN when the data transformation from json to js is done,\n    /*\n  fetch('https://swapi.dev/api/films').then(\n    response => {return response.json().then(\n      data => {console.log(data.results);\n        const transformedMovies = data.results.map(moviedata => {\n          return {id: moviedata.episode_id,\n          title: moviedata.title,\n          openingText: moviedata.opening_crawl,\n          releaseDate: moviedata.release_date\n          }\n        });\n      setMovies(transformedMovies);\n      setIsLoading(false)\n      }\n    )}\n  );\n*/\n\n    /*ALTERNATIVE VERSION IS USING ASYNC AND AWAIT: \n  async function fetchMoviesHandler() {\n    const response = await fetch('')\n    const data = await response.json();\n  }\n  */\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films\");\n      if (!response.ok) {\n        throw new Error(\"SOMETHING WENT WRONG\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseData: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      //error in this case is the string \"SOMETHING WENT WRONG\"\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n\n\n\n\n  let content = \"Found No Movies\";\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>LOADING....</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}